# -*- coding: utf-8 -*-
"""task3_2018028

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OS6YGqzvDyEcuBF8uY1_7tq8-uEWH98Y
"""

import sys
import math
import cv2 as cv
import numpy as np
# Read image
image = cv.imread('333.jpg')

# Convert image to grayscale
gray = cv.cvtColor(image,cv.COLOR_BGR2GRAY)

# Use canny edge detection
edges = cv.Canny(gray, threshold1=30, threshold2=100)

# This returns an array of r and theta values
lines = cv.HoughLines(edges,1,np.pi/180, 200)

# Draw the lines
if lines is not None:
    for i in range(0, len(lines)):
        rho = lines[i][0][0]
        theta = lines[i][0][1]
        a = math.cos(theta)
        b = math.sin(theta)
        x0 = a * rho
        y0 = b * rho
        pt1 = (int(x0 + 1000*(-b)), int(y0 + 1000*(a)))
        pt2 = (int(x0 - 1000*(-b)), int(y0 - 1000*(a)))
        cv.line(edges, pt1, pt2, (0,0,255), 3, cv.LINE_AA)

# Show results
cv2_imshow( gray)
cv2_imshow( edges)

from google.colab.patches import cv2_imshow

dst = cv.Canny(gray, 50, 200, None, 3)
lines = cv.HoughLines(dst, 1, np.pi / 180, 150, None, 0, 0)

cv2_imshow( gray)
cv2_imshow( edges)
cv2_imshow( dst)